package com.jedad.auction.service.bid;

//~--- non-JDK imports ---------------------------------------------------------

import java.sql.Timestamp;
import java.util.Calendar;
import java.util.logging.Level;

import javax.annotation.PostConstruct;
import javax.ejb.Stateless;
import javax.interceptor.Interceptors;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import com.jedad.auction.common.xml.apiconfiguration.AddBidResponseType;
import com.jedad.auction.common.xml.apiconfiguration.AddBidType;
import com.jedad.auction.common.xml.apiconfiguration.RuntimeFaultMessageType;
import com.jedad.auction.exceptions.ActionServiceException;
import com.jedad.auction.exceptions.ActionServiceValidationException;
import com.jedad.auction.model.Bid;
import com.jedad.auction.model.Bidder;
import com.jedad.auction.model.Item;
import com.jedad.auction.service.ActionInterceptorExceptions;
import com.jedad.auction.service.auctionFiltersWLST;

/**
 * Session Bean implementation class TestUserBean
 */
@Stateless( name = "BidEJB",
            mappedName = "ejb.jedad.auction.service.BidEJB" )
@Interceptors( { ActionInterceptorExceptions.class } )
@WebService(
    serviceName = "ApiBidService",
    name = "ApiBid",
    targetNamespace = "urn:ApiBidService.1.0"
)
@SOAPBinding
public class BidBean extends BaseBidService implements BidRemote, BidLocal
{

    /**
     * Default constructor.
     */
    public BidBean()
    {
        // TODO Auto-generated constructor stub
    }

    /**
     * Method description
     *
     */
    @PostConstruct
    public void initialize()
    {
        logger.log(
            Level.WARNING,
            "\n...................BidBean Initialize........................\n:" );
    }

    /**
     * Method description
     *
     *
     * @param bidRepository
     */

    // @EJB( beanName = "BidRepository" )  // another way of injection

    /*
     *   public void setbidRepository( BidLocal bidRepository )
     * {
     *     this.bidRepository = bidRepository;
     * }
     */
    private void activateFilters()
    {
        new auctionFiltersWLST();
        auctionFiltersWLST.connect();
        auctionFiltersWLST.createFilters();
    }

    /**
     * Method description
     *
     *
     * @param name
     *
     * @return
     */
    @WebMethod( exclude = true )
    public String ActiveWSFilters( String name )
    {
        activateFilters();

        String returnStr = "Hello ";

        returnStr = " !!!START!!!  \n" + returnStr + " " + name
                    + "  welcome to the Action!";
        logger.log(
            Level.INFO,
            " Test General EJB Resource. Example, serviceTimeout Variable : "
            + this.serviceTimeout.toString() );
        logger.log( Level.INFO, " Calling the EJB Util...." );
        baseUtilLocal.baseUtil();

        return returnStr;
    }

    /**
     * Method description
     *
     *
     *
     *
     * @param BidderID
     * @param ItemID
     * @param amount
     *
     * @param bidrequest
     *
     * @return
     *
     * @throws ActionServiceException
     */

    // @RolesAllowed("sysroleplatformmss")
    // @PermitAll

    /*
     *  @WebMethod( operationName = "addBid" )
     * @WebResult( name = "response" )
     *
     *
     *  public
     * String persistBid( @WebParam( name = "biderId",
     *                              targetNamespace = "http://www.auction.com/api/adf/bidservice/ebm" ) Long BidderID,
     *                   @WebParam( name = "itemId",
     *                              targetNamespace = "http://www.auction.com/api/adf/bidservice/ebm" ) Long ItemID,
     *                   @WebParam( name = "amount",
     *                              targetNamespace = "http://www.auction.com/api/adf/bidservice/ebm" ) Double amount )
     *                                      throws ActionServiceException
     * RuntimeFaultMessage runtimeFaultMessage;
     *    RuntimeFaultMessage.Detail detail;
     *
     *    if( ( BidderID == null ) || ( ItemID == null ) || ( amount == null ) )
     *    {
     *        runtimeFaultMessage = new RuntimeFaultMessage();
     *        runtimeFaultMessage.setCode( "auction-00101" );
     *        runtimeFaultMessage.setSummary( "Fault on persistBid, one ore more the parameters are null" );
     *
     *        throw new ActionServiceValidationException( "Fault on persistBid, one ore more parameters are null",
     *                                                    runtimeFaultMessage );
     *    }
     *    else
     *    {
     *        logger.log( Level.WARNING, "TEST PRINCIPAL : " + context.getCallerPrincipal().getName() );
     *        logger.log( Level.WARNING, "TEST ROLE : " + context.isCallerInRole( "sysroleplatformmss" ) );
     *        logger.log( Level.INFO, "receive parametes: " + BidderID + ", " + ItemID + ", " + amount );
     *    }
     *
     *    if( amount != null & amount > 100.0 )
     *    {
     *        runtimeFaultMessage = new RuntimeFaultMessage();
     *        runtimeFaultMessage.setCode( "auction-00101" );
     *        runtimeFaultMessage.setSummary( "Validation Fault, Maximun price per article is $100" );
     *        detail = new RuntimeFaultMessage.Detail();
     *        detail.setMessage( "ActionServiceValidationException, amount > 100 dollars" );
     *        detail.setCoreFault( "Exception: ActionServiceValidationException" );
     *        detail.setOriginalPayload( "BidderId: " + BidderID + ", ItemId: " + ItemID + ", amount: $" + amount );
     *        runtimeFaultMessage.setDetail( detail );
     *
     *        throw new ActionServiceValidationException( "Fault validating the Bid Amount, "
     *                                                    + "  Come on  it is too Expensive!!!, Item Id: " + ItemID
     *                                                    + ", Bid Amount: " + amount, runtimeFaultMessage );
     *    }
     *
     *    Bid bid = new Bid();
     *
     *    bid.setBidderID( BidderID );
     *    bid.setItemID( ItemID );
     *    bid.setBidAmount( amount );
     *
     *    Calendar calendar = Calendar.getInstance();
     *
     *    logger.info( "JA TIME Format1: " + calendar.getTime() + "" + "\n Format2: " + calendar.getTime().getTime() );
     *
     *    Long timeStamp = calendar.getTime().getTime();
     *    Timestamp currentTime = new Timestamp( timeStamp );
     *
     *    bid.setBidDate( currentTime );
     *
     *    Bid bidResult = bidRepository.addBid( bid );
     *
     *    logger.fine( "bidResult == " + bidResult.getBidderID() );
     *
     *    String Success = "Succesfully added \n Bid: " + bid.getBidID() + ", Bidder: " + bid.getBidderID() + ", Item: "
     *                     + bid.getItemID() + ", Amount: " + bid.getBidAmount();
     *
     *    return Success;
     * }
     * {
     */
    @WebMethod( action = "addBid", operationName = "addBid" )
    @RequestWrapper(
            targetNamespace = "http://www.auction.com/api/adf/bidservice/ebm",
            className = "AddBidType" )
    @ResponseWrapper(
            targetNamespace = "http://www.auction.com/api/adf/bidservice/ebm",
            className = "AddBidResponseType" )
    @SOAPBinding
    @WebResult(
        targetNamespace = "http://www.auction.com/api/adf/bidservice/ebo",
        partName = "payload",
        name = "bidResponse"
    )
    public AddBidResponseType addBid( @WebParam(
        targetNamespace = "http://www.auction.com/api/adf/bidservice/ebo",
        partName = "payload",
        name = "bid"
    ) AddBidType bidrequest ) throws ActionServiceException
    {
        // BidResponse responseType = new BidResponse();
        AddBidResponseType bidResponse = new AddBidResponseType();
        RuntimeFaultMessageType runtimeFaultMessage;
        RuntimeFaultMessageType.Detail detail;
        Long bidderId = bidrequest.getBidderId();
        Long itemId = bidrequest.getItemId();
        Double amount = bidrequest.getAmount();

        if( ( null == bidderId ) || ( null == itemId ) || ( null == amount ) )
        {
            runtimeFaultMessage = new RuntimeFaultMessageType();
            runtimeFaultMessage.setCode( "auction-00111" );
            runtimeFaultMessage.setSummary(
                "Fault on persistBid, one ore more the parameters are null" );

            throw new ActionServiceValidationException(
                "Fault on persistBid, one ore more parameters are null",
                runtimeFaultMessage );
        }
        else
        {
            logger.log( Level.WARNING,
                        "TEST PRINCIPAL : "
                        + context.getCallerPrincipal().getName() );
            logger.log( Level.WARNING,
                        "TEST ROLE : "
                        + context.isCallerInRole( "sysroleplatformmss" ) );
            logger.log( Level.INFO,
                        "receive parametes: " + bidderId + ", " + itemId + ", "
                        + amount );
        }

        if( amount != null & amount > 100.0 )
        {
            runtimeFaultMessage = new RuntimeFaultMessageType();
            runtimeFaultMessage.setCode( "auction-00101" );
            runtimeFaultMessage.setSummary(
                "Validation Fault, Maximun price per article is $100" );
            detail = new RuntimeFaultMessageType.Detail();
            detail.setMessage(
                "ActionServiceValidationException, amount > 100 dollars" );
            detail.setCoreFault( "ADF-ActionServiceValidationException" );
            detail.setOriginalPayload( "BidderId:" + bidderId + " , ItemId: "
                                       + itemId + ", amount: $" + amount );
            runtimeFaultMessage.setDetail( detail );
            logger.info( "Before marshaling RuntimeFaultMessageType.class: "
                         + RuntimeFaultMessageType.class );
            logger.info( "Before marshaling runtimeFaultMessage.getCalss: "
                         + runtimeFaultMessage.getClass() );

            String xmlDefinition = xmlUtil.marshal( runtimeFaultMessage );

            // void ApiFaultQueuePublisherEJB(ApiFault apiFault){marshal and publish}

            /*
             * logger.info( "xmlDefinition: " + xmlDefinition );
             * logger.info( "Before un marshaling....." );
             *
             * RuntimeFaultMessageType unmarshalFault =
             *   (RuntimeFaultMessageType) xmlUtil.unMarshal( xmlDefinition, RuntimeFaultMessageType.class );
             *
             * logger.info( "RuntimeFaultMessageTyp. summary:: " + unmarshalFault.getSummary() );
             * logger.info( "Before xmlToObj....." );
             *
             * RuntimeFaultMessageType xmlFault =
             *   (RuntimeFaultMessageType) xmlUtil.xmlToObject( xmlDefinition, RuntimeFaultMessageType.class );
             *
             * logger.info( "After xmlToObj....." + xmlFault );
             * logger.info( "xmlFault. summary:: " + xmlFault.getSummary() );
             */
            logger.info( "Before publishing to the queue.....2" );
            jmsPublisherUtil.send( xmlDefinition );
            logger.info( "Util pass......" );

            throw new ActionServiceValidationException(
                "Fault validating the Bid Amount, "
                + "  Come on  it is too Expensive!!!, Item Id: " + itemId
                + ", Bid Amount: " + amount, runtimeFaultMessage );
        }

        Bid bid = new Bid();
        
        Bidder bidder = new Bidder();
        bidder.setUsername("bob1");
        bidder.setPassword("Passw0rd");
        bidder.setBidFrecuency(1.50);
        bidder.setFirstName("Jim");
        bidder.setLastName("Angarita");
        
        Item item  = new Item();
        item.setTitle("Item Test");
        item.setDescription("Item for test");
        
        
        bid.setBidder(bidder);
        bid.setItem( item );
        bid.setBidAmount( amount );

        Calendar calendar = Calendar.getInstance();

        logger.info( "JA TIME Format1: " + calendar.getTime() + ""
                     + "\n Format2: " + calendar.getTime().getTime() );

        Long timeStamp = calendar.getTime().getTime();
        Timestamp currentTime = new Timestamp( timeStamp );

        bid.setBidDate( currentTime );

        Bid bidResult = bidRepository.insertBid( bid );

        logger.warning( "bidResult == " + bidResult.getBidder().getFirstName() );

        String Success = "Succesfully added \n Bid: " + bid.getId()
                         + ", Bidder: " + bid.getBidder().getId() + ", Item: "
                         + bid.getItem().getId() + ", Amount: " + bid.getBidAmount();

        // Response Type
        bidResponse.setResponse( Success );

        // responseType.setResponse( bidResponse );
        return bidResponse;
    }
}
